Контейнер для локальной разработки
==================================


Что же такое Docker
-------------------

Docker – open–source движок, автоматизирующий развертывание приложений в легковесные, переносимые, самодостаточные контейнеры, которые могут без изменений переноситься между серверами.

Тот же самый контейнер, который разработчик создает и тестирует на ноутбуке, может быть легко перенесен на продакшн-сервера в облако и так же легко смигрирован в другой регион при необходимости.

Основные способы использования Docker:

* Автоматизация упаковки и развертывания приложений
* Создание собственных легковесных PaaS окружений
* Автоматизация тестирования и непрерывной интеграции/развертывания
* Развертывание и масштабирование веб-приложений, баз данных и сервисов бекенда


Дисклеймер
----------

Хотя Docker, изначально предназначен для запуска одного сервиса на один контейнер, данный контейнер пренебрегает этим ограничение в угоду легкости разработки. И запускает (в стандартной сборке): uwsgi и nginx.


Как пользоваться
----------------

Установка
~~~~~~~~~

Для начало нужно `установить <https://docs.docker.com/installation/>`_ Docker на рабочую машину. Обладателям Mac OS повезло, так как есть прекрасный визуальный интерфейс к Docker - `Kitematic <https://github.com/kitematic/kitematic>`_.


Дополнительные контейнеры
~~~~~~~~~~~~~~~~~~~~~~~~~

Docker изначально не может работать с DNS и разносить разные контейнеры на разные домены, поэтому, если вы не хотите держать в уме все порты или останавливать один контейнер чтобы запустить другой, потребуется `nginx-proxy <https://github.com/jwilder/nginx-proxy>`_.

Запустим `nginx-proxy`:

    docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock jwilder/nginx-proxy

Для добавления домена потребуется прописать его в файле `hosts`:

    127.0.0.1 (или IP Docker'а)       project.dev.lo

И добавить окружение к контейнеру:

    -e VIRTUAL_HOST=project.dev.lo

Стоит отметить: для нормальной работы нужно отключить локальную версию Nginx (если таковая имеется).


Образы
~~~~~~

Перед началом работы, стоит собрать образ (image), чтобы в последствии использовать его при запуске проектов. Не стоит волноваться о долгой сборке первого образа, в будущем Docker будет по возможности использовать кеш и сборка последующих образов будет занимать считанные секунды.

    sudo docker build -t <name_image> /path/to/Docerfile

Чтобы получить список всех доступных образов, можно воспользоваться командой:

    sudo docker images


Запуск проекта
~~~~~~~~~~~~~~

Для того, чтобы иметь возможность вносить изменения в код и видеть результаты моментально, при запуске с помощью `VOLUME <https://docs.docker.com/userguide/dockervolumes/>`_, можно указать какие директории нужно пробросить во внутрь контейнера:

    -v=/host/path/to/dir:/container/path/to/dir:<права>.

Проброс портов, примерно аналогичен с директориями:

    -p <host port>:<container port>

В последствии для удобной работы можно задать имя контейнеру (но не обязательно) передав параметр:

    --name <name>.

Также мы должны указать какой образ использовать:

    -d <name_image>

И если вы используете `nginx-proxy`, также можно указать домен:

    -e VIRTUAL_HOST=project.dev.lo

Полная команда для запуска проекта будет выглядеть так:

    sudo docker run -e VIRTUAL_HOST=project.dev.lo --name <name_project> -d <name_image> -v=/host/path/to/repo/dev:/var/www/project/repo/dev:rw -v=/host/path/to/conf:/var/www/project/conf:rw

Проброс репозитария и директории с конфигами необходим. Файл database должен содержать все необходимые настройки подключения к БД.

Если все успешно, через некоторое время проект будет запущен и доступен по адресу `http://project.dev.lo/ <http://project.dev.lo/>`_.


Полезные команды
~~~~~~~~~~~~~~~~

Остановить работу контейнера:

    sudo docker stop <name> (вместо имени можно использовать ID)


Запустить контейнер:

    sudo docker start <name> (или ID)


Посмотреть список всех контейнеров:

    sudo docker ps -a


Уничтожить контейнер:

    sudo docker rm <name> (или ID)


Посмотреть список логи (здесь же можно увидеть логи uwsgi)

    sudo docker logs -f <name> (или ID)


SSH во внутрь контейнера

    sudo docker exec -i -t <name> (или ID) bash
